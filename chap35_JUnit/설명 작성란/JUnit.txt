JUnit
	자바언어를 위한 시스템 프레임워크
	소프트웨어 개발 단위 테스트를 작성하고 실행하는데 사용
	자동화된 테스트 케이스 실행과 테스트 결과 보고를 지원
	품질을 향상시키고 버그를 빠르게 식별하는데 도움이된다
	
	테스트케이스(Test Case) :
		특정 코드 또는 기능을 테스트하는 작은 단위
		각 테스트 케이스는 하나의 메서드로 표현을하고
		@Test 어노테이션을 사용해서 표시한다
		//예제를 사용할 때 Practice, Exam, Main을 쓰는 이유는
		  Test라고 쓰면 테스트케이스로 읽히는 경우가 있어서이다.
		  이는 자바에서는 test.java가 상관없지만 다른 언어에서는 @Test로 읽히는 경우도 있다.
		//Test는 메인메서드를 쓰지않는다.	
	Assert 메서드
		테스트 결과를 검증한다
		예상결과와 실제 결과를 비교하고 차이가 있을 경우 테스트를 실패로 표시
		assertEquals(예상결과, 실제결과) :
			두 결과 값이 동일한 경우 테스트 성공
			그렇지 않은 경우 실패
			값의 타입이나 내용이 다르면 테스트 실패
		assertTrue(조건) : 
			조건이 true인지 확인
			조건이 true라면 테스트 성공
			조건이 false라면 테스트 실패
		aseertFalse(조건):
			조건이 false인지 확인
			조건이 false면 테스트 성공, true 실패
		assertNotNull(객체):
			주어진 객체가 null인지 아닌지 확인
			객체가 null이 아닌 경우 테스트 성공
			객체가 null인 경우 테스트 실패	
		assertNull(객체) : 
			주어진 객체가 null인지 확인
			객체가 null인 경우 테스트 성공
			객체가 null이 아닌 경우 테스트 실패
			
	Test Fixture(테스트 픽스처) :
		테스트 케이스 실행을 위한 초기 설정이나 리소스를 준비하는 과정
		@Before @After 어노테이션을 사용하여 각 테스트케이스 전 후에 실행될 메서드를 정의할 수 있도록 지원
		데이터 베이스를 연결을 설정하거나 파일을 생성하는 작업을 수행할 수 있다
	
	Test Suite(테스트 스위트) :
		여러 테스트케이스를 묶어서 한번에 실행하면 테스트스위트를 사용
		@RunWith(Suite.class) 어노테이션을 사용해서 테스트 스위트 클래스를 정의하고 그 안에서 실행할 테스트케이스를 지정한다
			
			