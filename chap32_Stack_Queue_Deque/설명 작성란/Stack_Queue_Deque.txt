스택(Stack) 큐(Queue) 덱(Deque)
	데이터를 저장하고 관리하는 자료구조
	데이터를 다양한 방식으로 저장하고 접근할 수 있도록 설계되어 있다
	다양한 알고리즘과 문제 해결
	
스택(Stack)		//	  마지막 입장 첫번째 나감 
	데이터를 후입선출(LIFO Last-In-First-Out)의 원칙에 따라 저장하는 자료구조
	가장 최근에 삽입한 데이터가 가장 먼저 제거
	[stack의 메서드]
	push(item) : 스택에 데이터 추가
	pop()	   : 스택의 맨 위(가장 최근)의 데이터를 제거하고 반환
	peek()	   : 스택의 맨 위(가장 최근)의 데이터를 반환
	
	
	***
	cf)
	ArrayList & Stack
	데이터를 저장하고 관리하는데 사용되는 자료구조
	
	ArrayList
	동적배열로 구현된 자료구조 크기가 동적으로 조절가능
	데이터를 순서대로 저장하고 중간 삽입 및 삭제 작업 효율
	데이터를 추가하거나 제거할 때 일반적으로 예외를 발생시키지 않음
	
	Stack
	LIFO(Last In First Out) 후입선출 순서
	임시 데이터 저장
	함수 호출 복귀
	깊이우선탐색(DFS)
	pop연산을 빈스택에서 수행하려고 할 때 예외 발생
	
	***

큐(Queue)
	데이터를 선입선출(FIFO First-In-First-Out)의 원칙에 따라 저장하고 관리하는 자료구조
	데이터가 큐에 추가되면 가장 먼저 추가된 데이터가 가장 먼저 제거되는 방식
	[queue의 메서드]
	offer(item) : item 추가
	poll() : 큐에서 요소를 제거하고 반환, 제거한 요소는 삭제한 다음 출력
	peek() : 큐의 front요소를 확인하고 반환, 요소 제거 안됨
	size() : 큐의 크기를 확인한다.
	
DeQueue (Double-Ended-queue)
	양쪽 끝에서 요소를 추가하거나 제거할 수 있는 자료구조
	인터페이스 이기 때문에 LinkeList나 ArrayDequeue를 사용한다
	Deque 큐와 스택의 기능을 모두 수행할 수 있다.
	[deque의 메서드]
	addFirst(), offerFirst()   : Dequeue 맨 앞에 요소 추가
	addLast(), offerLast()     : Dequeue 맨 뒤에 요소 추가
	removeFirst(), pollFirst() : Dequeue 맨 앞에 요소를 제거하고 반환
	removeLast(), pollLast()   : Dequeue 맨 뒤에서 요소를 제거하고 반환
	getFirst(), peekFirst()    : Dequeue 맨 앞 요소를 가져온다
	getLast(), peekLast()      : Dequeue 맨 뒤 요소를 가져온다
	
	예)
	addFirst()   : 만약 요소를 추가할 공간이 부족하거나 제약 조건에 어긋나는 경우 예외가 발생한다
				   따라서 반환 값이 없다.
	offerFirst() : 요소를 추가하려고 할 때 예외를 발생시키지 않는다.
				   요소 추가가 성공하면 true 반환
				   요소 추가가 실패하면 false 반환
				   
	removeLast() : Dequeue가 비어있는 경우 예외 발생,
				   비어있을 때 예외를 발생시키므로 항상 요소를 반환한다.
	pollLast()   : Dequeue가 비어 있는 경우 null을 반환한다.
				   따라서 예외처리를 하지 않고 사용할 수 있다.
	
	getFirst()	 : 비어있을 경우 예외가 발생한다.
				   요소를 가져올 때 예외를 처리하고자 할 때 사용한다.
	peekFirst()  : 비어있을 경우 null값을 반환한다.
				   예외를 처리하지 않고 가져오기가 실패할 경우 대비
				   
	