스택(Stack) 큐(Queue) 덱(Deque)
	데이터를 저장하고 관리하는 자료구조
	데이터를 다양한 방식으로 저장하고 접근할 수 있도록 설계되어 있다
	다양한 알고리즘과 문제 해결
	
스택(Stack)		//	  마지막 입장 첫번째 나감 
	데이터를 후입선출(LIFO Last-In-First-Out)의 원칙에 따라 저장하는 자료구조
	가장 최근에 삽입한 데이터가 가장 먼저 제거
	push(item) : 스택에 데이터 추가
	pop()	   : 스택의 맨 위(가장 최근)의 데이터를 제거하고 반환
	peek()	   : 스택의 맨 위(가장 최근)의 데이터를 반환
	
	
	***
	cf)
	ArrayList & Stack
	데이터를 저장하고 관리하는데 사용되는 자료구조
	
	ArrayList
	동적배열로 구현된 자료구조 크기가 동적으로 조절가능
	데이터를 순서대로 저장하고 중간 삽입 및 삭제 작업 효율
	데이터를 추가하거나 제거할 때 일반적으로 예외를 발생시키지 않음
	
	Stack
	LIFO(Last In First Out) 후입선출 순서
	임시 데이터 저장
	함수 호출 복귀
	깊이우선탐색(DFS)
	pop연산을 빈스택에서 수행하려고 할 때 예외 발생
	
	***
	
큐(Queue)
	데이터를 선입선출(FIFO First-In-First-Out)의 원칙에 따라 저장하고 관리하는 자료구조
	데이터가 큐에 추가되면 가장 먼저 추가된 데이터가 가장 먼저 제거되는 방식
	offer(item) : item 추가
	poll() : 큐에서 요소를 제거하고 반환, 제거한 요소는 삭제한 다음 출력
	peek() : 큐의 front요소를 확인하고 반환, 요소 제거 안됨
	size() : 큐의 크기를 확인한다.
	
	
	